---
import Layout from "../layouts/Layout.astro";
import { typeColors, typeTextColors } from "../typescript/types";

export async function getStaticPaths(): Promise<{ params: { id: string } }[]> {
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=100");
  const data = await response.json();
  const pokemons: { params: { id: string } }[] = data.results.map((pokemon: { name: string }, index: number) => ({
    params: { id: (index + 1).toString() },
  }));

  return pokemons;
}

const { id } = Astro.params;
const pokemonResponse = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
const pokemonData = await pokemonResponse.json();
const { name, types, sprites, abilities, height, weight, stats }: { 
  name: string;
  types: { type: { name: string } }[];
  sprites: { other: { "official-artwork": { front_default: string } } };
  abilities: { ability: { name: string } }[];
  height: number;
  weight: number;
  stats: { stat: { name: string }; base_stat: number }[];
} = pokemonData;

const hpStat = stats.find((stat: { stat: { name: string } }) => stat.stat.name === "hp");
const defenseStat = stats.find((stat: { stat: { name: string } }) => stat.stat.name === "defense");

const hp: number = hpStat ? hpStat.base_stat : 0; 
const defense: number = defenseStat ? defenseStat.base_stat : 0;


---

<Layout title={`Detalles de ${name}`}>
  <div class="container mx-auto px-4 py-20 bg-gray-200 rounded-2xl md:px-8">
    <div class="flex flex-col justify-center items-center md:flex-row">
      <div class="mb-8 md:mb-0 md:mr-24">
        <img class="h-64 w-64 md:h-96 md:w-96" src={sprites.other["official-artwork"].front_default} alt={name} />
      </div>
      <div class="flex flex-col bg-gray-300 rounded-3xl py-12 px-16 md:p-10 md:pl-12 md:pr-28">
        <div class="mb-6">
          <div class="flex items-center">
            <h1 class="text-2xl font-semibold mb-4 md:text-4xl">{name}</h1>
          </div>
          <span class="text-lg font-semibold">Numero: <span class="rounded-xl bg-slate-100 p-1">#{Number(id) < 10 ? `00${id}` : Number(id) < 100 ? `0${id}` : id}</span></span>
        </div>
        <div class="mb-6">
          <h2 class="text-xl font-semibold mb-2">Tipos:</h2>
          <div class="flex flex-wrap">
            {types.map((type) => (
              <div class={`rounded-full py-1 px-2 mr-2 font-semibold ${typeColors[type.type.name]} ${typeTextColors[type.type.name]}`}>
                {type.type.name.toUpperCase()}
              </div>
            ))}
          </div>
        </div>
        <div class="mb-6">
          <h2 class="text-xl font-semibold">Habilidades:</h2>
          <ul class="list-disc list-inside">
            {abilities.map((ability, index) => (
              <li :key={index} class="text-lg">
                {ability.ability.name}
              </li>
            ))}
          </ul>
        </div>
        <div class="flex flex-col md:flex-row mb-6">
          <div class="mr-10 mb-4 md:mb-0">
            <h2 class="text-xl font-semibold">Height:</h2>
            <ul class="list-disc list-inside">
              <p class="text-lg font-semibold ml-3">{height} kg</p>
            </ul>
          </div>
          <div>
            <h2 class="text-xl font-semibold">Weight:</h2>
            <ul class="list-disc list-inside">
              <p class="text-lg font-semibold ml-3">{weight} kg</p>
            </ul>
          </div>
        </div>
        <div class="flex flex-col md:flex-row">
          <p class="bg-red-400 rounded-full p-2 text-xl font-bold mb-4 md:mb-0 text-center">
            hp: {hp}
          </p>
          <p class="ml-0 md:ml-5 bg-slate-400 rounded-full p-2 text-xl font-bold text-center">
            def: {defense}
          </p>
        </div>
      </div>
    </div>
  </div>
</Layout>